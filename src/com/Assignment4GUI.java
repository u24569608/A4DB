/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com;


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;



/**
 *
 * @author connorbell
 */
public class Assignment4GUI extends javax.swing.JFrame {
    
    private Connection connection = null;
    private Statement statement = null;
    
    
    
    /**
     * Creates new form Assignment4GUI
     */
    public Assignment4GUI() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlConnection = new javax.swing.JPanel();
        btnConnect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edtPassword = new javax.swing.JPasswordField();
        edtUsername = new javax.swing.JTextField();
        edtDatabaseName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        pnlMessages = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        redMessages = new javax.swing.JTextArea();
        pgctrlMain = new javax.swing.JTabbedPane();
        tbEmployees = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblEmployees = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        edtFilterValue = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnFilter = new javax.swing.JButton();
        cmbFields = new javax.swing.JComboBox<>();
        btnLoadEmployeeData = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tbProducts = new javax.swing.JTabbedPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        btnAddNewProduct = new javax.swing.JButton();
        btnLoadProductsData = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        tbNotifications = new javax.swing.JTabbedPane();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblCustomers = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        btnAddNewCustomer = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        edtDeleteCustomerID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        btnDeleteCustomer = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        edtUpdateCustomerID = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnUpdateCustomer = new javax.swing.JButton();
        cmbUpdateField = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        edtUpdateNewValue = new javax.swing.JTextField();
        btnLoadCustomerData = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        btnLoadEmployeeData2 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        btnGetExistingData = new javax.swing.JButton();
        tbReports = new javax.swing.JTabbedPane();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblReport = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("A4DB");
        setForeground(java.awt.Color.white);
        setName("frmMain"); // NOI18N

        pnlConnection.setBackground(new java.awt.Color(255, 255, 255));
        pnlConnection.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlConnection.setForeground(new java.awt.Color(255, 255, 255));
        pnlConnection.setName("pnlConnection"); // NOI18N
        pnlConnection.setOpaque(false);

        btnConnect.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/connect_database.png"))); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConnect.setName("btnConnect"); // NOI18N
        btnConnect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnConnectMouseClicked(evt);
            }
        });
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel1.setText("Connect Database");

        jLabel2.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel2.setText("Username");

        jLabel3.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel3.setText("Password");

        edtPassword.setFont(new java.awt.Font("Futura", 0, 13)); // NOI18N
        edtPassword.setText("081410");
        edtPassword.setToolTipText("");
        edtPassword.setName("edtPassword"); // NOI18N

        edtUsername.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        edtUsername.setText("root");
        edtUsername.setName("edtUsername"); // NOI18N
        edtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtUsernameActionPerformed(evt);
            }
        });

        edtDatabaseName.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        edtDatabaseName.setText("u24569608_u24634434_northwind");
        edtDatabaseName.setName("edtDatabaseName"); // NOI18N
        edtDatabaseName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtDatabaseNameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel4.setText("Database");

        javax.swing.GroupLayout pnlConnectionLayout = new javax.swing.GroupLayout(pnlConnection);
        pnlConnection.setLayout(pnlConnectionLayout);
        pnlConnectionLayout.setHorizontalGroup(
            pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConnectionLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConnectionLayout.createSequentialGroup()
                        .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edtDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlConnectionLayout.createSequentialGroup()
                                .addComponent(edtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlConnectionLayout.setVerticalGroup(
            pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlConnectionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(edtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnConnect))
                    .addComponent(edtDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        pnlMessages.setBackground(new java.awt.Color(255, 255, 255));
        pnlMessages.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlMessages.setForeground(new java.awt.Color(255, 255, 255));
        pnlMessages.setOpaque(false);

        jTabbedPane1.setToolTipText("Messages");
        jTabbedPane1.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jTabbedPane1.setName("tpBase"); // NOI18N

        jScrollPane1.setToolTipText("Messages");
        jScrollPane1.setName("tbMessages"); // NOI18N

        redMessages.setEditable(false);
        redMessages.setBackground(new java.awt.Color(0, 0, 0));
        redMessages.setColumns(20);
        redMessages.setFont(new java.awt.Font("Courier New", 1, 15)); // NOI18N
        redMessages.setForeground(new java.awt.Color(51, 255, 0));
        redMessages.setLineWrap(true);
        redMessages.setRows(5);
        jScrollPane1.setViewportView(redMessages);

        jTabbedPane1.addTab("Messages", new javax.swing.ImageIcon(getClass().getResource("/com/messages.png")), jScrollPane1); // NOI18N

        javax.swing.GroupLayout pnlMessagesLayout = new javax.swing.GroupLayout(pnlMessages);
        pnlMessages.setLayout(pnlMessagesLayout);
        pnlMessagesLayout.setHorizontalGroup(
            pnlMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMessagesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        pnlMessagesLayout.setVerticalGroup(
            pnlMessagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMessagesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Messages");

        pgctrlMain.setEnabled(false);
        pgctrlMain.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        pgctrlMain.setName("pgctrlMain"); // NOI18N
        pgctrlMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pgctrlMainMouseClicked(evt);
            }
        });

        tbEmployees.setEnabled(false);
        tbEmployees.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tbEmployees.setName("tbEmployees"); // NOI18N

        jScrollPane6.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N

        tblEmployees.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tblEmployees.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblEmployees.setName("tblEmployees"); // NOI18N
        jScrollPane6.setViewportView(tblEmployees);

        tbEmployees.addTab("Data", jScrollPane6);

        edtFilterValue.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        edtFilterValue.setToolTipText("");
        edtFilterValue.setName("edtFilterValue"); // NOI18N
        edtFilterValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtFilterValueActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel5.setText("Filter results by:");

        btnFilter.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnFilter.setText("Filter");
        btnFilter.setName("btnFilter"); // NOI18N
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        cmbFields.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        cmbFields.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "first_name", "last_name", "email_address", "city", "job_title", "business_phone", "home_phone", "mobile_phone", "fax_number", "address", "state_province", "zip_postal_code", "country_region", "web_page", "notes" }));
        cmbFields.setSelectedIndex(-1);
        cmbFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFieldsActionPerformed(evt);
            }
        });

        btnLoadEmployeeData.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnLoadEmployeeData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnLoadEmployeeData.setText("Load Data");
        btnLoadEmployeeData.setName("btnLoadEmployeeData"); // NOI18N
        btnLoadEmployeeData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadEmployeeDataActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel7.setText("Load all Employee data");

        jLabel15.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel15.setText("Filter Employee data ");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 1064, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLoadEmployeeData, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(edtFilterValue)
                                .addComponent(cmbFields, 0, 243, Short.MAX_VALUE))
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoadEmployeeData)
                .addGap(18, 18, 18)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(edtFilterValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFilter)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        tbEmployees.addTab("Actions", jPanel4);

        pgctrlMain.addTab("Employees", new javax.swing.ImageIcon(getClass().getResource("/com/employees.png")), tbEmployees); // NOI18N
        tbEmployees.getAccessibleContext().setAccessibleName("Data");

        tbProducts.setEnabled(false);
        tbProducts.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tbProducts.setName("tbProducts"); // NOI18N

        tblProducts.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProducts.setName("tblProducts"); // NOI18N
        jScrollPane7.setViewportView(tblProducts);

        tbProducts.addTab("Data", jScrollPane7);

        jLabel6.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel6.setText("Add new product data");

        btnAddNewProduct.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnAddNewProduct.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/form.png"))); // NOI18N
        btnAddNewProduct.setText("Add new...");
        btnAddNewProduct.setName("btnAddNewProduct"); // NOI18N
        btnAddNewProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewProductActionPerformed(evt);
            }
        });

        btnLoadProductsData.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnLoadProductsData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnLoadProductsData.setText("Load Data");
        btnLoadProductsData.setName("btnLoadProductsData"); // NOI18N
        btnLoadProductsData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadProductsDataActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel16.setText("Load all Products data");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 1064, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLoadProductsData, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddNewProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoadProductsData)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddNewProduct)
                .addContainerGap(200, Short.MAX_VALUE))
        );

        tbProducts.addTab("Actions", jPanel5);

        pgctrlMain.addTab("Products", new javax.swing.ImageIcon(getClass().getResource("/com/product.png")), tbProducts); // NOI18N

        tbNotifications.setEnabled(false);
        tbNotifications.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tbNotifications.setName("tbNotifications"); // NOI18N

        tblCustomers.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tblCustomers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblCustomers.setName("tblEmployees"); // NOI18N
        jScrollPane9.setViewportView(tblCustomers);

        tbNotifications.addTab("Data", jScrollPane9);

        jPanel7.setToolTipText("");

        jLabel8.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel8.setText("Add Customer ");

        btnAddNewCustomer.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnAddNewCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/form.png"))); // NOI18N
        btnAddNewCustomer.setText("Add new...");
        btnAddNewCustomer.setName("btnConnect"); // NOI18N
        btnAddNewCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewCustomerActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel9.setText("Delete Customer");

        edtDeleteCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtDeleteCustomerIDActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel10.setText("Enter the Customer ID:");

        btnDeleteCustomer.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnDeleteCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnDeleteCustomer.setText("Delete");
        btnDeleteCustomer.setName("btnConnect"); // NOI18N
        btnDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCustomerActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel11.setText("Update Customer");

        edtUpdateCustomerID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edtUpdateCustomerIDActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel12.setText("Enter the Customer ID:");

        btnUpdateCustomer.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnUpdateCustomer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnUpdateCustomer.setText("Update");
        btnUpdateCustomer.setName("btnConnect"); // NOI18N
        btnUpdateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateCustomerActionPerformed(evt);
            }
        });

        cmbUpdateField.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        cmbUpdateField.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "company", "first_name", "last_name", "email_address", "job_title", "business_phone", "home_phone", "mobile_phone", "fax_number", "address", "city", "state_province", "zip_postal_code", "country_region", "web_page", "notes" }));
        cmbUpdateField.setSelectedIndex(-1);
        cmbUpdateField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbUpdateFieldMouseClicked(evt);
            }
        });
        cmbUpdateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUpdateFieldActionPerformed(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel13.setText("Choose the field to update: ");

        jLabel14.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        jLabel14.setText("(New) value: ");

        btnLoadCustomerData.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnLoadCustomerData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnLoadCustomerData.setText("Load Data");
        btnLoadCustomerData.setName("btnLoadEmployeeData"); // NOI18N
        btnLoadCustomerData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadCustomerDataActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel17.setText("Load all Customer data");

        btnLoadEmployeeData2.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnLoadEmployeeData2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnLoadEmployeeData2.setText("Load Data");
        btnLoadEmployeeData2.setName("btnLoadEmployeeData"); // NOI18N
        btnLoadEmployeeData2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadEmployeeData2ActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font(".AppleSystemUIFont", 1, 13)); // NOI18N
        jLabel18.setText("Load inactive Customers");

        btnGetExistingData.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        btnGetExistingData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/icons8-bolt-16.png"))); // NOI18N
        btnGetExistingData.setText("Get Existing Value");
        btnGetExistingData.setName("btnConnect"); // NOI18N
        btnGetExistingData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetExistingDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLoadCustomerData, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(55, 55, 55)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddNewCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnLoadEmployeeData2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnUpdateCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                                    .addComponent(edtUpdateNewValue)
                                    .addComponent(cmbUpdateField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(edtUpdateCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(67, 67, 67))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edtDeleteCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(256, 256, 256))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(btnGetExistingData, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtUpdateCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(btnDeleteCustomer))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(edtDeleteCustomerID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbUpdateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(7, 7, 7)
                        .addComponent(btnAddNewCustomer))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadCustomerData)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadEmployeeData2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGetExistingData)
                .addGap(10, 10, 10)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtUpdateNewValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateCustomer)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        tbNotifications.addTab("Actions", jPanel7);

        pgctrlMain.addTab("Notifications", new javax.swing.ImageIcon(getClass().getResource("/com/notifications.png")), tbNotifications); // NOI18N

        tbReports.setEnabled(false);
        tbReports.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tbReports.setName("tbReports"); // NOI18N
        tbReports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbReportsMouseClicked(evt);
            }
        });

        tblReport.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 13)); // NOI18N
        tblReport.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblReport.setName("tblReport"); // NOI18N
        jScrollPane8.setViewportView(tblReport);

        tbReports.addTab("Report", jScrollPane8);

        pgctrlMain.addTab("Reports", new javax.swing.ImageIcon(getClass().getResource("/com/report.png")), tbReports); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pgctrlMain, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlMessages, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlConnection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlConnection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pgctrlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("");
        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        String username = edtUsername.getText();
        String password = new String(edtPassword.getPassword());

        try {
            // Explicitly load the MariaDB driver
            Class.forName("org.mariadb.jdbc.Driver");
              
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] MariaDB JDBC Driver loaded successfully.\n");
                
            String dbURL = "jdbc:mariadb://localhost:3306/" + edtDatabaseName.getText(); 
            // Connect to the database
            connection = DriverManager.getConnection(
                //"jdbc:mariadb://localhost:3306/u24569608_u24634434_northwind",
                    dbURL, 
                username, 
                password);
               
            time = LocalTime.now();
            timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Successfully connected to the database.\n");
            
            // Enable tabs 
            pgctrlMain.enable();
            tbEmployees.enable();
            tbProducts.enable(); 
            tbNotifications.enable(); 
            tbReports.enable(); 
           

        } catch (ClassNotFoundException e) {
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Error: MariaDB JDBC driver not found. " + e.getMessage() + "\n");
            e.printStackTrace();
        } catch (SQLException ex) {
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Connection error: " + ex.getMessage() + ".\n");
            ex.printStackTrace();
        }
        
     
    }//GEN-LAST:event_btnConnectActionPerformed

    private void edtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edtUsernameActionPerformed

    private void edtFilterValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtFilterValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edtFilterValueActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        // FILTER EMPLOYEES
        if (cmbFields.getSelectedIndex() != -1) {
            String field = (String) cmbFields.getItemAt(cmbFields.getSelectedIndex()); 
            String value = edtFilterValue.getText(); 
            
            String SQL_Statement = "SELECT first_name AS `First Name`," + 
                    " last_name AS `Last Name`, address AS `Address`," +
                    " city AS `City`, country_region AS `Region`," + 
                    " zip_postal_code AS `Postal Code`, business_phone AS" +
                    " `Phone`, company AS `Office` FROM employees WHERE job_title IS NOT NULL AND " + 
                    field + " = '" + value + "';";
            
            loadTableData("tblEmployees", SQL_Statement);
            
        }
       
    }//GEN-LAST:event_btnFilterActionPerformed

    private void cmbFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFieldsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFieldsActionPerformed

    private void btnAddNewProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewProductActionPerformed
    if (connection == null) {
            JOptionPane.showMessageDialog(this, "Error: Please connect to the database first. ", 
            "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Create and show the product add dialog
            ProductAddDialog dialog = new ProductAddDialog(this, connection, tblProducts);
            dialog.setVisible(true);

            // After dialog closes, refresh the products table
            loadProductsTable();
        }
    }//GEN-LAST:event_btnAddNewProductActionPerformed

    private void btnAddNewCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewCustomerActionPerformed
        // TODO add your handling code here:
        if (connection == null) {
           JOptionPane.showMessageDialog(this, "Error: Please connect to the database first.", 
               "Error", JOptionPane.ERROR_MESSAGE);
       } else {
           // Create and show the customer add dialog
           CustomerAddDialog dialog = new CustomerAddDialog(this, true, connection);
           dialog.setVisible(true);

           // After dialog closes, refresh the customers table
           loadTableData("tblCustomers", "SELECT * FROM customers");
       }
    }//GEN-LAST:event_btnAddNewCustomerActionPerformed

    private void edtDeleteCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtDeleteCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edtDeleteCustomerIDActionPerformed

    private void btnDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCustomerActionPerformed
        // TODO add your handling code here:
        // DELETE THE CUSTOMER ID CODE HERE 
                                                     
       if (connection == null) {
        JOptionPane.showMessageDialog(this, "Error: Please connect to the database first.", 
            "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String customerIdStr = edtDeleteCustomerID.getText().trim();
        if (customerIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Customer ID to delete.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // First check if the customer exists
            Statement stmt = connection.createStatement();
            String checkSql = "SELECT id FROM customers WHERE id = '" + customerIdStr + "'";
            ResultSet rs = stmt.executeQuery(checkSql);

            if (!rs.next()) {
                // Customer not found
                LocalTime time = LocalTime.now();
                String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                redMessages.append("[" + timeString + "] Customer with ID " + customerIdStr + " was not found in the database.\n");
                JOptionPane.showMessageDialog(this, "Customer with ID " + customerIdStr + " was not found.", 
                    "Not Found", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Check if customer has orders
            String checkOrdersSql = "SELECT COUNT(*) AS order_count FROM orders WHERE customer_id = '" + customerIdStr + "'";
            rs = stmt.executeQuery(checkOrdersSql);
            rs.next();
            int orderCount = rs.getInt("order_count");

            if (orderCount > 0) {
                // Customer has orders - check for invoices
                String checkInvoicesSql = "SELECT COUNT(*) AS invoice_count FROM invoices i " +
                                         "JOIN orders o ON i.order_id = o.id " +
                                         "WHERE o.customer_id = '" + customerIdStr + "'";
                rs = stmt.executeQuery(checkInvoicesSql);
                rs.next();
                int invoiceCount = rs.getInt("invoice_count");

                String message = "This customer has " + orderCount + " associated orders";
                if (invoiceCount > 0) {
                    message += " and " + invoiceCount + " invoices";
                }
                message += ". Do you want to delete all associated records?";

                int confirm = JOptionPane.showConfirmDialog(this, 
                    message, 
                    "Confirm Deletion", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.YES_OPTION) {
                    try {
                        // Disable foreign key checks temporarily
                        stmt.execute("SET FOREIGN_KEY_CHECKS = 0");

                        // First delete invoices (if any)
                        if (invoiceCount > 0) {
                            String deleteInvoicesSql = "DELETE i FROM invoices i " +
                                                     "JOIN orders o ON i.order_id = o.id " +
                                                     "WHERE o.customer_id = '" + customerIdStr + "'";
                            stmt.executeUpdate(deleteInvoicesSql);
                        }

                        // Then delete the orders
                        String deleteOrdersSql = "DELETE FROM orders WHERE customer_id = '" + customerIdStr + "'";
                        stmt.executeUpdate(deleteOrdersSql);

                        // Finally delete the customer
                        String deleteCustomerSql = "DELETE FROM customers WHERE id = '" + customerIdStr + "'";
                        int rowsAffected = stmt.executeUpdate(deleteCustomerSql);

                        // Re-enable foreign key checks
                        stmt.execute("SET FOREIGN_KEY_CHECKS = 1");

                        if (rowsAffected > 0) {
                            LocalTime time = LocalTime.now();
                            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                            redMessages.append("[" + timeString + "] Customer: " + customerIdStr + 
                                             " and all related records (" + orderCount + " orders" + 
                                             (invoiceCount > 0 ? ", " + invoiceCount + " invoices" : "") + 
                                             ") were successfully deleted.\n");
                            JOptionPane.showMessageDialog(this, 
                                "Customer with ID " + customerIdStr + " and all related records were successfully deleted.", 
                                "Success", JOptionPane.INFORMATION_MESSAGE);
                            edtDeleteCustomerID.setText("");
                        }
                        
                    
                        
                    } catch (SQLException ex) {
                        // Make sure to re-enable foreign key checks if something fails
                        try {
                            stmt.execute("SET FOREIGN_KEY_CHECKS = 1");
                        } catch (SQLException e) {
                            // Ignore if this fails
                        }
                        LocalTime time = LocalTime.now();
                        String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                        redMessages.append("[" + timeString + "] Error deleting customer and related records: " + ex.getMessage() + ".\n");
                        JOptionPane.showMessageDialog(this, 
                            "Error deleting customer and related records: " + ex.getMessage(), 
                            "Database Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                // No orders - just delete the customer
                String deleteCustomerSql = "DELETE FROM customers WHERE id = '" + customerIdStr + "'";
                int rowsAffected = stmt.executeUpdate(deleteCustomerSql);

                if (rowsAffected > 0) {
                    LocalTime time = LocalTime.now();
                    String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                    redMessages.append("[" + timeString + "] Customer: " + customerIdStr + " was successfully deleted from the database.\n");
                    JOptionPane.showMessageDialog(this, "Customer with ID " + customerIdStr + " was successfully deleted.", 
                        "Success", JOptionPane.INFORMATION_MESSAGE);
                    edtDeleteCustomerID.setText("");
                }
            }
        } catch (SQLException ex) {
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Error deleting customer: " + ex.getMessage() + ".\n");
            JOptionPane.showMessageDialog(this, "Error deleting customer: " + ex.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        
        // Update the table: 
        loadTableData("tblCustomers", "SELECT * FROM customers");
    }//GEN-LAST:event_btnDeleteCustomerActionPerformed

    private void edtUpdateCustomerIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtUpdateCustomerIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edtUpdateCustomerIDActionPerformed

    private void btnUpdateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateCustomerActionPerformed
        // TODO add your handling code here:
        // UPDATE A SPECIFIC FIELD FOR A CUSTOMER (WITH A SPECIFIC ID)
        if (connection == null) {
        JOptionPane.showMessageDialog(this, "Error: Please connect to the database first.", 
            "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String customerIdStr = edtUpdateCustomerID.getText().trim();
        if (customerIdStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Customer ID to update.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (cmbUpdateField.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Please select a field to update.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String newValue = edtUpdateNewValue.getText().trim();
        if (newValue.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a new value for the selected field.", 
                "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // First check if the customer exists
            Statement stmt = connection.createStatement();
            String checkSql = "SELECT id FROM customers WHERE id = '" + customerIdStr + "'";
            ResultSet rs = stmt.executeQuery(checkSql);

            if (!rs.next()) {
                // Customer not found
                LocalTime time = LocalTime.now();
                String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                redMessages.append("[" + timeString + "] Customer with ID " + customerIdStr + " was not found in the database.\n");
                JOptionPane.showMessageDialog(this, "Customer with ID " + customerIdStr + " was not found.", 
                    "Not Found", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            // Get the selected field to update
            String fieldToUpdate = (String) cmbUpdateField.getSelectedItem();

            // Build and execute the update query
            String updateSql = "UPDATE customers SET " + fieldToUpdate + " = '" + newValue + 
                              "' WHERE id = '" + customerIdStr + "'";

            int rowsAffected = stmt.executeUpdate(updateSql);

            if (rowsAffected > 0) {
                LocalTime time = LocalTime.now();
                String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                redMessages.append("[" + timeString + "] Successfully updated " + fieldToUpdate + 
                                 " to '" + newValue + "' for customer ID " + customerIdStr + ".\n");
                JOptionPane.showMessageDialog(this, "Successfully updated customer record.", 
                    "Success", JOptionPane.INFORMATION_MESSAGE);

                // Refresh the customers table
                loadTableData("tblCustomers", "SELECT * FROM customers");
            } else {
                LocalTime time = LocalTime.now();
                String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                redMessages.append("[" + timeString + "] No changes made to customer ID " + customerIdStr + ".\n");
                JOptionPane.showMessageDialog(this, "No changes were made to the customer record.", 
                    "Information", JOptionPane.INFORMATION_MESSAGE);
            }
            
            
        } catch (SQLException ex) {
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Error updating customer: " + ex.getMessage() + ".\n");
            JOptionPane.showMessageDialog(this, "Error updating customer: " + ex.getMessage(), 
                "Database Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_btnUpdateCustomerActionPerformed
    
    
    
    private void btnLoadEmployeeDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadEmployeeDataActionPerformed
        // Load data into the Employees table (first tab)        
        String SQL_Statement = "SELECT first_name AS `First Name`, last_name AS `Last Name`, address AS `Address`, city AS `City`, country_region AS `Region`, zip_postal_code AS `Postal Code`, business_phone AS `Phone`, company AS `Office` FROM employees WHERE job_title IS NOT NULL;";
        loadTableData("tblEmployees", SQL_Statement);
    }//GEN-LAST:event_btnLoadEmployeeDataActionPerformed

    private void btnLoadProductsDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadProductsDataActionPerformed
        // TODO add your handling code here:
        String SQL_Statement = "SELECT * FROM products;";
        loadTableData("tblProducts", SQL_Statement);
    }//GEN-LAST:event_btnLoadProductsDataActionPerformed

    private void pgctrlMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pgctrlMainMouseClicked
        // TODO add your handling code here:
        if (pgctrlMain.getSelectedIndex() == 3) {
            // ON REPORT MOUSE CLICK 
            /* 
                The owner would like an up-to-date consolidated report to be generated each time the Report tab is
                opened. This report must provide the number of products in each warehouse for each category. You
                should return the warehouse name, the category name, and the number of products in the category.
            */ 

            String SQL_Statement = "SELECT CASE p.category WHEN 'Beverages' THEN 'Warehouse Alpha'" + 
                                    " WHEN 'Condiments' THEN 'Warehouse Beta'" + 
                                    " WHEN 'Oil' THEN 'Warehouse Gamma'" + 
                                    " WHEN 'Jams, Preserves' THEN 'Warehouse Delta'" + 
                                    " WHEN 'Dried Fruit & Nuts' THEN 'Warehouse Epsilon'" + 
                                    " WHEN 'Sauces' THEN 'Warehouse Zeta'" + 
                                    " WHEN 'Canned Fruit & Vegetables' THEN 'Warehouse Eta'" + 
                                    " WHEN 'Baked Goods & Mixes' THEN 'Warehouse Theta'" + 
                                    " WHEN 'Canned Meat' THEN 'Warehouse Iota'" + 
                                    " WHEN 'Soups' THEN 'Warehouse Kappa'" + 
                                    " WHEN 'Candy' THEN 'Warehouse Lambda'" + 
                                    " WHEN 'Grains' THEN 'Warehouse Mu'" + 
                                    " WHEN 'Pasta' THEN 'Warehouse Nu'" + 
                                    " WHEN 'Dairy products' THEN 'Warehouse Xi'" + 
                                    " WHEN 'Cereal' THEN 'Warehouse Omicron'" + 
                                    " WHEN 'Chips, Snacks' THEN 'Warehouse Pi'" + 
                                    " ELSE 'General Warehouse'" + 
                                    " END AS warehouse_name," + 
                                    " p.category AS category_name, COUNT(*) AS number_of_products" + 
                                    " FROM products p GROUP BY p.category ORDER BY warehouse_name;"; 

            loadTableData("tblReport", SQL_Statement);
        }
    }//GEN-LAST:event_pgctrlMainMouseClicked

    private void tbReportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbReportsMouseClicked
                           
    }//GEN-LAST:event_tbReportsMouseClicked

    private void edtDatabaseNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edtDatabaseNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edtDatabaseNameActionPerformed

    private void btnLoadCustomerDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadCustomerDataActionPerformed
        // TODO add your handling code here:
        // Load all customer data into tblCustomers: 
        String SQL_Statement = "SELECT * FROM customers;"; 
        loadTableData("tblCustomers", SQL_Statement);
    }//GEN-LAST:event_btnLoadCustomerDataActionPerformed

    private void btnLoadEmployeeData2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadEmployeeData2ActionPerformed
        // TODO add your handling code here:
        // LOAD CUSTOMERS THAT ARE INACTIVE
        String SQL_Statement = "SELECT c.id, c.first_name, c.last_name, c.email_address, c.business_phone," + 
        " c.mobile_phone, c.city, c.country_region, MAX(o.order_date) AS last_order_date" + 
        " FROM customers c LEFT JOIN orders o ON c.id = o.customer_id GROUP BY " + 
        " c.id, c.first_name, c.last_name, c.email_address, c.business_phone, c.mobile_phone, c.city," +  
        " c.country_region HAVING MAX(o.order_date) IS NULL ORDER BY last_order_date, c.last_name ASC;";
        loadTableData("tblCustomers", SQL_Statement);
    }//GEN-LAST:event_btnLoadEmployeeData2ActionPerformed

    private void cmbUpdateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUpdateFieldActionPerformed
       
    }//GEN-LAST:event_cmbUpdateFieldActionPerformed

    private void cmbUpdateFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbUpdateFieldMouseClicked
        
    }//GEN-LAST:event_cmbUpdateFieldMouseClicked

    private void btnGetExistingDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetExistingDataActionPerformed
        if (cmbUpdateField.getSelectedIndex() != -1 && !edtUpdateCustomerID.getText().trim().isEmpty()) {
            try {
                String customerIdStr = edtUpdateCustomerID.getText().trim();
                String selectedField = (String) cmbUpdateField.getSelectedItem();
                
                Statement stmt = connection.createStatement();
                String query = "SELECT " + selectedField + " FROM customers WHERE id = '" + customerIdStr + "'";
                ResultSet rs = stmt.executeQuery(query);
                
                if (rs.next()) {
                    String currentValue = rs.getString(1);
                    edtUpdateNewValue.setText(currentValue != null ? currentValue : "");
                } else {
                    // Customer not found
                    LocalTime time = LocalTime.now();
                    String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                    redMessages.append("[" + timeString + "] Customer with ID " + customerIdStr + " was not found in the database.\n");
                    JOptionPane.showMessageDialog(this, "Customer with ID " + customerIdStr + " was not found.", 
                        "Not Found", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex) {
                LocalTime time = LocalTime.now();
                String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                redMessages.append("[" + timeString + "] Error fetching current value: " + ex.getMessage() + ".\n");
            }
        }
    }//GEN-LAST:event_btnGetExistingDataActionPerformed

    private void btnConnectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnConnectMouseClicked
        // TODO add your handling code here:
        // Enable all the page controls and tabs 
        pgctrlMain.enable();
        
    }//GEN-LAST:event_btnConnectMouseClicked

    private void loadTableData(String tableComponentName, String query) {
        try {
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(query);
            ResultSetMetaData metaData = rs.getMetaData();

            // Get column count
            int columnCount = metaData.getColumnCount();

            // Create a DefaultTableModel to hold the data
            DefaultTableModel model = new DefaultTableModel();

            // Add column names
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(metaData.getColumnName(i));
            }

            // Add data rows
            while (rs.next()) {
                Object[] row = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    row[i - 1] = rs.getObject(i);
                }
                model.addRow(row);
            }

            // Find the right table component and set its model
            switch (tableComponentName) {
                case "tblEmployees":
                    tblEmployees.setModel(model);
                    break;
                case "tblProducts":
                    tblProducts.setModel(model); 
                    break; 
                case "tblReport":
                    tblReport.setModel(model); 
                    break;
                case "tblCustomers":
                    tblCustomers.setModel(model);
                    break; 
                // Add cases for other tables if needed
            }
            
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Successfully loaded data into " + tableComponentName + ".\n");

        } catch (SQLException ex) {
            LocalTime time = LocalTime.now();
            String timeString = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            redMessages.append("[" + timeString + "] Error loading data: " + ex.getMessage() + ".\n");
            ex.printStackTrace();
        }
    }
    
   
    
    
    
    private void loadProductsTable() {
    try {
        DefaultTableModel model = (DefaultTableModel) tblProducts.getModel();
        model.setRowCount(0); // Clear existing data
        
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT * FROM products");
        ResultSetMetaData metaData = rs.getMetaData();
        
        // Set column names if empty
        if (model.getColumnCount() == 0) {
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                model.addColumn(metaData.getColumnName(i));
            }
        }
        
        // Add data rows
        while (rs.next()) {
            Object[] row = new Object[metaData.getColumnCount()];
            for (int i = 1; i <= metaData.getColumnCount(); i++) {
                row[i - 1] = rs.getObject(i);
            }
            model.addRow(row);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error loading products: " + e.getMessage(), 
            "Database Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Assignment4GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Assignment4GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Assignment4GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Assignment4GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Assignment4GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewCustomer;
    public javax.swing.JButton btnAddNewProduct;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDeleteCustomer;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnGetExistingData;
    private javax.swing.JButton btnLoadCustomerData;
    private javax.swing.JButton btnLoadEmployeeData;
    private javax.swing.JButton btnLoadEmployeeData2;
    private javax.swing.JButton btnLoadProductsData;
    private javax.swing.JButton btnUpdateCustomer;
    public javax.swing.JComboBox<String> cmbFields;
    private javax.swing.JComboBox<String> cmbUpdateField;
    private javax.swing.JTextField edtDatabaseName;
    private javax.swing.JTextField edtDeleteCustomerID;
    public javax.swing.JTextField edtFilterValue;
    private javax.swing.JPasswordField edtPassword;
    private javax.swing.JTextField edtUpdateCustomerID;
    private javax.swing.JTextField edtUpdateNewValue;
    private javax.swing.JTextField edtUsername;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane pgctrlMain;
    private javax.swing.JPanel pnlConnection;
    private javax.swing.JPanel pnlMessages;
    private javax.swing.JTextArea redMessages;
    private javax.swing.JTabbedPane tbEmployees;
    private javax.swing.JTabbedPane tbNotifications;
    private javax.swing.JTabbedPane tbProducts;
    private javax.swing.JTabbedPane tbReports;
    private javax.swing.JTable tblCustomers;
    private javax.swing.JTable tblEmployees;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTable tblReport;
    // End of variables declaration//GEN-END:variables
}

